# nginx reverse proxy for local auth-gated multi-frontend MVP
# Single public listener on :80 (mapped to host :9000 via compose)
# AuthN via oauth2-proxy using auth_request.
# Path mapping:
#   / -> welcome
#   /regulator/ -> regulator-frontend
#   /auditor/ -> auditor-frontend
#   /farmer/ -> farmer-frontend
#   /retail/ -> retail-frontend
#   /laboratory/ -> laboratory-frontend
# Keycloak (admin) remains on host :8080 only for admin purposes.

worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;
  server_tokens off;

  # Helper: strip /oauth2/auth subrequest (internal)
  server {
    listen 80;
    server_name _;

    # Allow health without auth (for container orchestration)
    location /healthz {
      return 200 'ok';
      add_header Content-Type text/plain;
    }

    # OAuth2 Proxy endpoints (no auth_request to avoid loops)
    location /oauth2/ {
      proxy_pass       http://oauth2-proxy:4180;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
    }

    # Subrequest endpoint for auth gate
    location = /auth_internal {
      internal;
      proxy_pass       http://oauth2-proxy:4180/oauth2/auth;
      proxy_set_header Host $host;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
    }

    # Global auth gate (except explicit exclusions above)
    set $auth_request_uri /auth_internal;

    # Root (welcome)
    location / {
      auth_request $auth_request_uri;
      error_page 401 = @oauth2_sign_in;
      error_page 403 = @oauth2_sign_in;
      proxy_pass http://welcome-frontend:9000/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

  # Path prefix mounts (strip the first segment before proxying so apps
  # keep working as if served from "/")
  location /regulator/ { rewrite ^/regulator/(.*)$ /$1 break; try_files $uri @regulator; }
  location /auditor/ { rewrite ^/auditor/(.*)$ /$1 break; try_files $uri @auditor; }
  location /farmer/ { rewrite ^/farmer/(.*)$ /$1 break; try_files $uri @farmer; }
  location /retail/ { rewrite ^/retail/(.*)$ /$1 break; try_files $uri @retail; }
  location /laboratory/ { rewrite ^/laboratory/(.*)$ /$1 break; try_files $uri @laboratory; }

    location @regulator { auth_request $auth_request_uri; error_page 401 = @oauth2_sign_in; proxy_pass http://regulator-frontend:9001/; include /etc/nginx/proxy_params; }
    location @auditor { auth_request $auth_request_uri; error_page 401 = @oauth2_sign_in; proxy_pass http://auditor-frontend:9001/; include /etc/nginx/proxy_params; }
    location @farmer { auth_request $auth_request_uri; error_page 401 = @oauth2_sign_in; proxy_pass http://farmer-frontend:9000/; include /etc/nginx/proxy_params; }
    location @retail { auth_request $auth_request_uri; error_page 401 = @oauth2_sign_in; proxy_pass http://retail-frontend:9001/; include /etc/nginx/proxy_params; }
    location @laboratory { auth_request $auth_request_uri; error_page 401 = @oauth2_sign_in; proxy_pass http://laboratory-frontend:9001/; include /etc/nginx/proxy_params; }

    location @oauth2_sign_in {
      return 302 /oauth2/start?rd=$scheme://$host$request_uri;
    }
  }
}

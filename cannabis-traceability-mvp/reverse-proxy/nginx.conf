# Reverse proxy with oauth2-proxy (Keycloak) auth gate in front of welcome + role apps.
# Ports only bound to loopback via docker-compose to keep private on VPS.

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;
  server_tokens off;

  map $http_upgrade $connection_upgrade { default upgrade; '' close; }

  upstream welcome_app { server welcome-frontend:9000; }
  upstream regulator_app { server regulator-frontend:9001; }
  upstream auditor_app { server auditor-frontend:9001; }
  upstream farmer_app { server farmer-frontend:9000; }
  upstream retail_app { server retail-frontend:9001; }
  upstream laboratory_app { server laboratory-frontend:9001; }

  # Helper for redirect to login
  map $request_uri $auth_login_url {
    default "/oauth2/start?rd=$scheme://$host$request_uri";
  }

  server {
    listen 80;
    # All regular paths require auth except explicit oauth2 endpoints
    auth_request /oauth2/auth;
    error_page 401 = @oauth2_login;

    # OAuth2 Proxy endpoints (bypass auth_request to avoid loops)
    location /oauth2/ {
      proxy_pass http://oauth2-proxy:4180/;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Auth-Request-Redirect $request_uri;
    }

    location @oauth2_login {
      return 302 /oauth2/start?rd=$scheme://$host$request_uri;
    }

    # Root welcome (after auth)
    location = / { proxy_pass http://welcome_app; }

    # Role-specific mounts
  location /regulator/ { proxy_pass http://regulator_app/; }
  location /auditor/ { proxy_pass http://auditor_app/; }
  location /farmer/ { proxy_pass http://farmer_app/; }
  location /retail/ { proxy_pass http://retail_app/; }
  location /laboratory/ { proxy_pass http://laboratory_app/; }

    # Vite HMR websockets (optional, may adjust ports)
    location /hmr-regulator/ { proxy_pass http://regulator_app; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; }
  }
}

version: "3.9"

volumes:
  auditor_node_modules:
  regulator_node_modules:
  retail_node_modules:
  laboratory_node_modules:
  welcome_node_modules:
  farmer_node_modules:

services:
  # -------------------------------------------------------------
  # PUBLIC ENTRY (local dev): reverse-proxy (nginx)
  # Simplified (no-auth) mode: directly routes path prefixes to internal frontends
  # and serves welcome app at '/'. Original oauth2-proxy auth layer has been
  # disabled temporarily for faster iteration. Reactivate by uncommenting the
  # oauth2-proxy service block and restoring auth_request directives in nginx.conf.
  reverse-proxy:
    image: nginx:1.27-alpine
    depends_on:
      - welcome-frontend
      - oauth2-proxy
      - regulator-frontend
      - auditor-frontend
      - farmer-frontend
      - retail-frontend
      - laboratory-frontend
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    # This is the single public port for the MVP user entry (was welcome :9000)
    # Bind only to loopback so not exposed to the public internet
    ports:
      - "127.0.0.1:9000:80"
    networks:
      - mvp_public
      - mvp_internal

  auditor-frontend:
    build:
      context: ./auditor-frontend
    environment:
      VITE_USE_API_PROXY: "true"
      VITE_API_URL: http://backend:3001
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
      NODE_ENV: development
      DEBUG: "vite:*"
      VITE_HMR_PORT: "24680"
    # Do not publish frontend ports to the host. Keep them internal-only so
    # they are only reachable from other containers (eg. oauth2-proxy).
    expose:
      - "9001"
      - "24680"
    volumes:
      - ./auditor-frontend:/app
      - auditor_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - mvp_internal

  regulator-frontend:
    build:
      context: ./regulator-frontend
    environment:
      VITE_USE_API_PROXY: "true"
      VITE_API_URL: http://backend:3001
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
      NODE_ENV: development
      DEBUG: "vite:*"
      VITE_HMR_PORT: "24679"
    expose:
      - "9001"
      - "24679"
    volumes:
      - ./regulator-frontend:/app
      - regulator_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - mvp_internal

  retail-frontend:
    build:
      context: ./retail-frontend
    environment:
      VITE_USE_API_PROXY: "true"
      VITE_API_URL: http://backend:3001
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
      NODE_ENV: development
      DEBUG: "vite:*"
      VITE_HMR_PORT: "24683"
    expose:
      - "9001"
      - "24683"
    volumes:
      - ./retail-frontend:/app
      - retail_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - mvp_internal

  farmer-frontend:
    build:
      context: ./farmer-frontend
    environment:
      VITE_USE_API_PROXY: "true"
      VITE_API_URL: http://backend:3001
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
      NODE_ENV: development
      DEBUG: "vite:*"
      VITE_HMR_PORT: "24682"
    expose:
      - "9000"
      - "24682"
    volumes:
      - ./farmer-frontend:/app
      - farmer_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev -- --port 9000"
    networks:
      - mvp_internal

  laboratory-frontend:
    build:
      context: ./laboratory-frontend
    environment:
      VITE_USE_API_PROXY: "true"
      VITE_API_URL: http://backend:3001
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
      NODE_ENV: development
      DEBUG: "vite:*"
      VITE_HMR_PORT: "24681"
    expose:
      - "9001"
      - "24681"
    volumes:
      - ./laboratory-frontend:/app
      - laboratory_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - mvp_internal

  welcome-frontend:
    build:
      context: ./welcome-frontend
    environment:
      VITE_USE_API_PROXY: "false"
      NODE_ENV: development
      DEBUG: "vite:*"
      VITE_HMR_PORT: "24678"
    expose:
      - "9000"
      - "24678"
    volumes:
      - ./welcome-frontend:/app
      - welcome_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - mvp_internal

  # Keycloak identity provider (development mode). Admin user is created from
  # environment variables. Keycloak listens on 8080 internally. We keep it on
  # the internal network only by default; for local testing we map the port to
  # the host. On the VPS we'll expose it only on the auth subdomain via nginx.
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      # External hostname for public access (set in .env). Ensures issued tokens / redirects use correct domain.
      KC_HOSTNAME: ${KC_HOSTNAME:-auth.renewedge-solutions.com}
      # Trust reverse proxy (host nginx terminates TLS and sets X-Forwarded-*). 'edge' = one reverse proxy hop.
      KC_PROXY: ${KC_PROXY_MODE:-edge}
      # Allow HTTP when TLS terminated in front (set true only during initial setup if needed).
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS:-false}
    command: start-dev --import-realm
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      - mvp_internal

  # oauth2-proxy adds Keycloak-based auth in front of welcome-frontend.
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    restart: unless-stopped
    # Bind only loopback for local/VPS private usage
    ports:
      - "127.0.0.1:9006:4180"
    env_file:
      - ./.env
    environment:
      OAUTH2_PROXY_PROVIDER: "oidc"
      OAUTH2_PROXY_OIDC_ISSUER_URL: "http://keycloak:8080/realms/mvp"
      OAUTH2_PROXY_CLIENT_ID: "mvp-client"
      OAUTH2_PROXY_CLIENT_SECRET: "${OAUTH2_PROXY_CLIENT_SECRET}"
      OAUTH2_PROXY_COOKIE_SECRET: "${COOKIE_SECRET}"
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      # Adjust to external https URL later on VPS
      OAUTH2_PROXY_REDIRECT_URL: "http://127.0.0.1:9006/oauth2/callback"
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      # We let nginx do upstream routing; oauth2-proxy only does auth endpoints
      OAUTH2_PROXY_UPSTREAMS: "file:///dev/null"
      OAUTH2_PROXY_SKIP_AUTH_ROUTES: "/oauth2/healthz"
      OAUTH2_PROXY_COOKIE_SECURE: "false"
      OAUTH2_PROXY_COOKIE_SAMESITE: "lax"
    depends_on:
      - keycloak
    networks:
      - mvp_internal
      - mvp_public

networks:
  mvp_internal:
    driver: bridge
  mvp_public:
    driver: bridge

